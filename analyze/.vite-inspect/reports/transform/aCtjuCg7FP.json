{
  "resolvedId": "C:/Users/pandu/OneDrive/桌面/相遇甜點/sweetMeets/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { top, left, right, bottom, start } from \"../enums.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getMainAxisFromPlacement from \"../utils/getMainAxisFromPlacement.js\";\nimport getAltAxis from \"../utils/getAltAxis.js\";\nimport { within, withinMaxClamp } from \"../utils/within.js\";\nimport getLayoutRect from \"../dom-utils/getLayoutRect.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\nimport getVariation from \"../utils/getVariation.js\";\nimport getFreshSideObject from \"../utils/getFreshSideObject.js\";\nimport { min as mathMin, max as mathMax } from \"../utils/math.js\";\n\nfunction preventOverflow(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = detectOverflow(state, {\n    boundary: boundary,\n    rootBoundary: rootBoundary,\n    padding: padding,\n    altBoundary: altBoundary\n  });\n  var basePlacement = getBasePlacement(state.placement);\n  var variation = getVariation(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = getMainAxisFromPlacement(basePlacement);\n  var altAxis = getAltAxis(mainAxis);\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {\n    mainAxis: tetherOffsetValue,\n    altAxis: tetherOffsetValue\n  } : Object.assign({\n    mainAxis: 0,\n    altAxis: 0\n  }, tetherOffsetValue);\n  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n  var data = {\n    x: 0,\n    y: 0\n  };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis) {\n    var _offsetModifierState$;\n\n    var mainSide = mainAxis === 'y' ? top : left;\n    var altSide = mainAxis === 'y' ? bottom : right;\n    var len = mainAxis === 'y' ? 'height' : 'width';\n    var offset = popperOffsets[mainAxis];\n    var min = offset + overflow[mainSide];\n    var max = offset - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n\n    var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = offset + maxOffset - offsetModifierValue;\n    var preventedOffset = within(tether ? mathMin(min, tetherMin) : min, offset, tether ? mathMax(max, tetherMax) : max);\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n\n  if (checkAltAxis) {\n    var _offsetModifierState$2;\n\n    var _mainSide = mainAxis === 'x' ? top : left;\n\n    var _altSide = mainAxis === 'x' ? bottom : right;\n\n    var _offset = popperOffsets[altAxis];\n\n    var _len = altAxis === 'y' ? 'height' : 'width';\n\n    var _min = _offset + overflow[_mainSide];\n\n    var _max = _offset - overflow[_altSide];\n\n    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;\n\n    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n\n    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n\n    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n\n    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n\n    popperOffsets[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n};",
      "start": 1703087724957,
      "end": 1703087725286,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703087725286,
      "end": 1703087725286,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703087725286,
      "end": 1703087725286,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703087725286,
      "end": 1703087725286,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703087725286,
      "end": 1703087725286,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703087725287,
      "end": 1703087725287,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703087725287,
      "end": 1703087725288,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703087725288,
      "end": 1703087725288,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703087725289,
      "end": 1703087725289,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703087725289,
      "end": 1703087725289,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703087725289,
      "end": 1703087725289,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703087725289,
      "end": 1703087725289,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703087725289,
      "end": 1703087725289,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703087725289,
      "end": 1703087725289,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703087725289,
      "end": 1703087725289,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703087725289,
      "end": 1703087725289,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703087725289,
      "end": 1703087725289,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703087725289,
      "end": 1703087725289,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703087725289,
      "end": 1703087725289,
      "order": "normal"
    }
  ]
}
